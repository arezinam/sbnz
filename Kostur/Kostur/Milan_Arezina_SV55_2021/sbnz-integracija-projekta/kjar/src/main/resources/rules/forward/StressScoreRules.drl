package rules.forward;

import com.ftn.sbnz.model.models.UserActivity;
import com.ftn.sbnz.model.models.TaskEvent;
import com.ftn.sbnz.model.models.SelfReportEvent;
import com.ftn.sbnz.model.models.StressScore;
import com.ftn.sbnz.model.models.StressLevel;
import java.util.List;

declare SelfReportEvent
    @role(event)
end

declare TaskEvent
    @role(event)
end

rule "Reset StressScore"
salience 1000
when
    $s : StressScore()
then
    $s.setScore(0);
    update($s);
end

// --- Night points ---
rule "Score from night"
when
    $ua : UserActivity(night == true)
    $score : StressScore()
then
    modify($score) {
        setScore($score.getScore() + 2);
    }
end

// --- Weekend points ---
rule "Score from weekend"
when
    $ua : UserActivity(weekend == true)
    $score : StressScore()
then
    modify($score) {
        setScore($score.getScore() + 2);
    }
end


// --- Multitasking: 2 active tasks ---
rule "Score from multitasking 2 tasks"
when
    $score : StressScore()
    $tasks : List() from collect(TaskEvent(endTime == null, this != null))
    eval($tasks.size() == 2)
then
    modify($score) {
        setScore($score.getScore() + 1);
    }
end

// --- Multitasking: 3 active tasks ---
rule "Score from multitasking 3 tasks"
when
    $score : StressScore()
    $tasks : List() from collect(TaskEvent(endTime == null, this != null))
    eval($tasks.size() == 3)
then
    modify($score) {
        setScore($score.getScore() + 3);
    }
end

// --- Multitasking: more than 3 active tasks ---
rule "Score from multitasking more than 3 tasks"
when
    $score : StressScore()
    $tasks : List() from collect(TaskEvent(endTime == null, this != null))
    eval($tasks.size() > 3)
then
    modify($score) {
        setScore($score.getScore() + 5);
    }
end


// --- Work intensity points ---
rule "Score from work intensity"
when
    $score : StressScore()
    $totalIntensity : Double() from accumulate(
        TaskEvent(endTime == null, $intensity : intensity),
        sum($intensity)
    )
then
    modify($score) {
        setScore($score.getScore() + $totalIntensity);
    }
end


rule "Score from self report"
when
    $score : StressScore()
    $events : List() from collect(SelfReportEvent() over window:time(8h))
    eval(!$events.isEmpty())
    $latest : SelfReportEvent() from $events.get($events.size() - 1)
then
    modify($score) {
        setScore($score.getScore() + $latest.getStressLevel());
    }
end



// --- Update stress level ---
rule "Update stress level"
when
    $score : StressScore($s : score, $l : level)
then
    StressLevel newLevel = StressLevel.fromScore($s);
    if($l != newLevel) {
        modify($score) {
            setLevel(newLevel);
        }
    }
end
